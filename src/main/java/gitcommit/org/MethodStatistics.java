package gitcommit.org;


import org.joda.time.DateTime;

/*
 This class hold basic data generated by timing method execution and accumulating repeated execution times.
 The method is the fully qualified method name and the invocationCount is the number of times the method is
 called over the samplePeriodDurationMS - measured in milliseconds.  The startTime and endTime   are
 the Linux absolute time values and there's corresponding human readable string values for these, i.e.
 startTimeStr and endddTimeStr (the 2 extra 'd's are deliberate - the strings align in the JSON MongoChef display)
 The minimum and maximum values for one invocation are held in  minTimeNs and maxTimeNs and are in units of nanoseconds.
 The average execution time is also calculated and is in  avgTimeNs - again measured im nanoseconds.

  */
public class MethodStatistics    {


  private String method;
  private int invocationCount = 0;
  private long startTime = DateTime.now().getMillis();

  private long endTime;
  private long accumulatedTimeNs = 0;
  private long minTimeNs = Long.MAX_VALUE;
  private long maxTimeNs = 0;
  private long avgTimeNs = 0;

  private String startTimeStr;
  //'incorrect' spelling - makes the json line up in MongoChef
  private String endddTimeStr;
  private long samplePeriodDurationMs;



  public void updateValues(long time){

    invocationCount++;
    accumulatedTimeNs += time;
    if(time < minTimeNs) minTimeNs = time;
    if(time > maxTimeNs) maxTimeNs = time;

  }

  public void fixValues(String method){
    this.method = method;
    DateTime now = DateTime.now();
    endddTimeStr = now.toString();
    endTime = now.getMillis();

    startTimeStr = new DateTime(startTime).toString();

    samplePeriodDurationMs = endTime - startTime;
    if(invocationCount != 0){
      avgTimeNs = accumulatedTimeNs / invocationCount;
    }
  }



  @Override
  public String toString() {
    return "MethodStatistics{" +
      "method='" + method + '\'' +
      "startTimeStr='" + startTimeStr + '\'' +
      ", endTimeStr='" + endddTimeStr + '\'' +
      ", samplePeriodDurationMs=" + samplePeriodDurationMs +
      ", avgTimeNs=" + f(avgTimeNs) +
      ", maxTimeNs=" + f(maxTimeNs)+
      ", minTimeNs=" + f(minTimeNs) +
      ", accumulatedTimeNs=" +  f(accumulatedTimeNs) +
      ", endTime=" + endTime +
      ", startTime=" + startTime +
      ", invocationCount=" + invocationCount +

      '}';
  }

  double f(long t ){
    double v = (double) t / 1000000000.0;
    return (double)Math.round(v * 1000d) / 1000d;
  }
}

